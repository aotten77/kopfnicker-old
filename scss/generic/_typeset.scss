/*------------------------------------*\
	$TYPESET
\*------------------------------------*/

/**
 * Compass Vertical Rhythms (Without Compass)
 *
 * This is a git repo for using Compass Vertical Rhythms (with Rem) without the Compass dependency.
 * It's an unofficial port that will only be updated from time to time.
 *
 * DOCUMENTATION:
 * Check out Compass Beta for docs on how to use this vertical rhythms.
 * http://beta.compass-style.org/reference/compass/typography/vertical_rhythm/
 *
 * Credits:
 * @Chriseppstein & Compass team for creating the awesome vertical rhythms module
 *
 * LICENSE:
 * MIT
**/





/*------------------------------------*\
	$VARS
\*------------------------------------*/

$base-font-size:				16px !default;		// The default font size for all text in pixels.
$base-line-height:				24px !default;		// The distance between text baselines (vertical rhythm) in pixels.
$rhythm-unit:					'rem' !default;		// The length unit in which to output rhythm values. Supported values: px, em, rem. Percent units can't be used since they make calculating padding and margins impractical, and percentage borders are not valid or supported in css.
$rem-with-px-fallback:			false !default;		// Whether to output fallback values in px when using rem as the rhythm-unit.
$round-to-nearest-half-line:	false !default;		// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function to round the line height to the nearest half line height instead of the nearest integral line height to avoid large spacing between lines.
$min-line-padding:				2px !default;		// Ensure there is at least this many pixels of vertical padding above and below the text.
$relative-font-sizing:			if($rhythm-unit == px, false, true);	// @private Whether the rhythm output is in absolute units (px) or not (em, rem)





/*------------------------------------*\
	$VALIDATE_UNITS
\*------------------------------------*/

@if unit($base-font-size)	!= 'px'	{ @warn "$base-font-size must resolve to a pixel unit."; }
@if unit($base-line-height)	!= 'px' { @warn "$base-line-height must resolve to a pixel unit."; }
@if $rhythm-unit != 'px' and $rhythm-unit != 'em' and $rhythm-unit != 'rem' { @warn "$rhythm-unit must be `px`, `em` or `rem`."; }





/*------------------------------------*\
	$FUNCTIONS
\*------------------------------------*/

/**
 * Convert any CSS <length> or <percentage> value to any another.
 *
 * @param $length
 * A css <length> or <percentage> value
 *
 * @param $to-unit
 * String matching a css unit keyword, e.g. 'em', '%', etc.
 *
 * @param $from-context
 * When converting from relative units, the absolute length (in px) to
 * which $length refers (e.g. for $lengths in em units, would normally be the
 * font-size of the current element).
 *
 * @param $to-context
 * For converting to relative units, the absolute length in px to which the
 * output value will refer. Defaults to the same as $from-context, since it is
 * rarely needed.
**/
@function convert-length($length, $to-unit, $from-context: $base-font-size, $to-context: $from-context) {
	$from-unit: unit($length);
	// Optimize for cases where `from` and `to` units are accidentally the same.
	@if $from-unit == $to-unit { @return $length; }
	// Context values must be in px so we can determine a conversion ratio for
	// relative units.
	@if unit($from-context) != 'px' { @warn "Paremeter $from-context must resolve to a value in pixel units."; }
	@if unit($to-context) != 'px' { @warn "Parameter $to-context must resolve to a value in pixel units."; }
	// Convert input length to pixels
	$px-length: $length;
	@if $from-unit != 'px' {
		// Convert relative units using the from-context parameter.
		@if $from-unit == 'em' { $px-length: $length * $from-context / 1em }
		@else if $from-unit == 'rem' { $px-length: $length * $base-font-size / 1rem }
		@else if $from-unit == '%' { $px-length: $length * $from-context / 100% }
		@else if $from-unit == 'ex' { $px-length: $length * $from-context / 2ex }
		// Convert absolute units using Sass' conversion table.
		@else if $from-unit == 'in' or
				 $from-unit == 'mm' or
				 $from-unit == 'cm' or
				 $from-unit == 'pt' or
				 $from-unit == 'pc' { $px-length: 0px + $length }
		// Certain units can't be converted.
		@else if $from-unit == 'ch' or
				 $from-unit == 'vw' or
				 $from-unit == 'vh' or
				 $from-unit == 'vmin' {
			@warn "#{$from-unit} units can't be reliably converted; Returning original value.";
			@return $length;
		}
		@else {
			@warn "#{$from-unit} is an unknown length unit. Returning original value.";
			@return $length;
		}
	}
	// Convert length in pixels to the output unit
	$output-length: $px-length;
	@if $to-unit != 'px' {
		// Relative units
		@if $to-unit == 'em' { $output-length: $px-length * 1em / $to-context }
		@else if $to-unit == 'rem' { $output-length: $px-length * 1rem / $base-font-size }
		@else if $to-unit == '%' { $output-length: $px-length * 100% / $to-context }
		@else if $to-unit == 'ex' { $output-length: $px-length * 2ex / $to-context }
		// Absolute units
		@else if $to-unit == 'in' { $output-length: 0in + $px-length }
		@else if $to-unit == 'mm' { $output-length: 0mm + $px-length }
		@else if $to-unit == 'cm' { $output-length: 0cm + $px-length }
		@else if $to-unit == 'pt' { $output-length: 0pt + $px-length }
		@else if $to-unit == 'pc' { $output-length: 0pc + $px-length }
		// Non-convertible units
		@else if $to-unit == 'ch' or
				 $to-unit == 'vw' or
				 $to-unit == 'vh' or
				 $to-unit == 'vmin' {
			@warn "#{$to-unit} units can't be reliably converted; Returning original value.";
			@return $length;
		}
		@else {
			@warn "#{$to-unit} is an unknown length unit. Returning original value.";
			@return $length;
		}
	}
	@return $output-length;
}

/**
 * Calculate rhythm units.
**/
@function rhythm($lines: 1, $font-size: $base-font-size, $offset: 0) {
	$rhythm: convert-length($lines * $base-line-height - $offset, $rhythm-unit, $font-size);
	@if unit($rhythm) == px {
		$rhythm: floor($rhythm);
	}
	@return $rhythm;
}

/**
 * Calculate the minimum multiple of rhythm units needed to contain the font-size.
**/
@function lines-for-font-size($font-size) {
	$lines: if($round-to-nearest-half-line,
	ceil(2 * $font-size / $base-line-height) / 2,
	ceil($font-size / $base-line-height));
	// If lines are cramped include some extra lead.
	@if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {
		$lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
	}
	@return $lines;
}





/*------------------------------------*\
	$MIXINS
\*------------------------------------*/

/**
 * Output a given style rule containing rem values along with an (optional)
 * fallback rule for older browsers (with rem values converted to px).
 *
 * @param $property
 * The css property name.
 *
 * @param $values
 * The value or list of values for the property.
 *
 * @param $use-px-fallback
 * [ true | false ]
**/
@mixin rem($property, $values, $use-px-fallback: false) {
	// get converted values.
	$values: list-convert-rems($values);
	$px-values: map-get($values, px);
	$values: map-get($values, rem);
	// Use pixel fallback for browsers that don't understand rem units.
	@if $use-px-fallback and $px-values != $values {
		#{$property}: $px-values;
	}
	// Use rem values for everyone else (overrides pixel values).
	#{$property}: $values;
}

/**
 * @private Outputs rhythm values. For rem units, outputs pixel fallbacks
 * by default.
**/
@mixin output-rhythm($property, $values) {
	$output: ();
	@each $value in $values {
		@if unit($value) == px {
			// Ensure all pixel values are rounded to the nearest pixel.
			$output: join($output, round($value));
		}
		@else {
			$output: join($output, $value);
		}
	}
	#{$property}: $output;
}

/**
 * Adjust a block to have a different font size and line height to maintain the
 * rhythm. $lines specifies how many multiples of the baseline rhythm each line
 * of this font should use up. It does not have to be an integer, but it
 * defaults to the smallest integer that is large enough to fit the font.
 * Use $from-size to adjust from a font-size other than the base font-size.
**/
@mixin adjust-font-size-to($to-size, $lines: auto, $from-size: $base-font-size) {
	$to-size: convert-length($to-size, px, $from-size);
	@if $lines == auto {
		$lines: lines-for-font-size($to-size);
	}
	@include output-rhythm(font-size, convert-length($to-size, $rhythm-unit, $from-size));
	@include adjust-leading-to($lines, $to-size);
}

/**
 * Adjust a block to have different line height to maintain the rhythm.
 * $lines specifies how many multiples of the baseline rhythm each line of this
 * font should use up. It does not have to be an integer, but it defaults to the
 * smallest integer that is large enough to fit the font.
**/
@mixin adjust-leading-to($lines, $font-size: $base-font-size) {
	@include output-rhythm(line-height, rhythm($lines, $font-size));
}

/**
 * Apply leading whitespace. The $property can be margin or padding.
**/
@mixin leader($lines: 1, $font-size: $base-font-size, $property: margin) {
	@include output-rhythm(#{$property}-top, rhythm($lines, $font-size));
}

/**
 * Apply leading whitespace as padding.
**/
@mixin padding-leader($lines: 1, $font-size: $base-font-size) {
	@include output-rhythm(padding-top, rhythm($lines, $font-size));
}

/**
 * Apply leading whitespace as margin.
**/
@mixin margin-leader($lines: 1, $font-size: $base-font-size) {
	@include output-rhythm(margin-top, rhythm($lines, $font-size));
}

/**
 * Apply trailing whitespace. The $property can be margin or padding.
**/
@mixin trailer($lines: 1, $font-size: $base-font-size, $property: margin) {
	@include output-rhythm(#{$property}-bottom, rhythm($lines, $font-size));
}

/**
 * Apply trailing whitespace as padding.
**/
@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {
	@include output-rhythm(padding-bottom, rhythm($lines, $font-size));
}

/**
 * Apply trailing whitespace as margin.
**/
@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {
	@include output-rhythm(margin-bottom, rhythm($lines, $font-size));
}

/**
 * Shorthand mixin to apply whitespace for top and bottom margins and padding.
*/
@mixin rhythm($leader: 1, $padding-leader: 0, $padding-trailer: $padding-leader, $trailer: $leader, $font-size: $base-font-size) {
	@include leader($leader, $font-size);
	@include padding-leader($padding-leader, $font-size);
	@include padding-trailer($padding-trailer, $font-size);
	@include trailer($trailer, $font-size);
}

/**
 * Shorthand mixin to apply whitespace for top and bottom margins.
**/
@mixin rhythm-margins($leader: 1, $trailer: $leader, $font-size: $base-font-size) {
	@include leader($leader, $font-size);
	@include trailer($trailer, $font-size);
}

/**
 * Shorthand mixin to apply whitespace for top and bottom padding.
**/
@mixin rhythm-padding($padding-leader: 1, $padding-trailer: $padding-leader, $font-size: $base-font-size) {
	@include padding-leader($padding-leader, $font-size);
	@include padding-trailer($padding-trailer, $font-size);
}





/*------------------------------------*\
    $IMPORT
\*------------------------------------*/

@mixin baseline($line-height) {
	background: transparent linear-gradient(to bottom, rgba(0, 0, 0, .3) 0%, transparent 5%, transparent 100%) repeat scroll 0 0;
	background-size: 100% $line-height;
}

//body {
	//@include baseline($base-line-height);
//}


$show-grid-backgrounds:		false;		// Globaler Schalter zum Anzeigen der Baselines
$show-baseline-grid:		true;		// Zeigt das Grundraster
$show-typo-baseline-grid:	false;		// Zeigt ein Raster zu den jeweiligen Elementen

@mixin baseline-grid($type: "body") {
	@if $type == "body" and $show-baseline-grid == true {
		@include baseline-grid-background();
	}

	@if $type == "typo" and $show-typo-baseline-grid == true {
		@include baseline-grid-background()
	}
}





/*------------------------------------*\
    $TYPESIZES/SCALE
\*------------------------------------*/

/**
 * Greek alphabet naming system. Obscure, yet hierarchical.
 * Allows us to avoid naming based on html object. 
 * Eg. A h1 can be smaller visually, than a h4.
**/
$alpha:		40px;
$beta:		36px;
$gamma:		32px;
$delta:		28px;
$epsilon:	24px;
$zeta:		20px;
$eta:		16px;
$theta:		14px;
$iota:		12px;
$kappa:		10px;
$lambda:	9px;

$para:		$eta;	// Paragraph size
$quote:		$eta;	// Quote size
$decrease:	$theta;	// Smaller than $para Text Size
$small:		$iota;	// Small Text size
$mini:		$kappa;	// Mini Text size





/*------------------------------------*\
    $TYPESET_SIZE_MODULES
\*------------------------------------*/

@mixin as-heading__headline	{ @include baseline-grid('typo'); @include adjust-font-size-to($alpha); }
@mixin as-heading__largest	{ @include baseline-grid('typo'); @include adjust-font-size-to($beta); }
@mixin as-heading__large	{ @include baseline-grid('typo'); @include adjust-font-size-to($gamma); }
@mixin as-heading__medium	{ @include baseline-grid('typo'); @include adjust-font-size-to($delta); }
@mixin as-heading__normal	{ @include baseline-grid('typo'); @include adjust-font-size-to($epsilon); }
@mixin as-heading__small	{ @include baseline-grid('typo'); @include adjust-font-size-to($zeta); }
@mixin as-heading__smallest	{ @include baseline-grid('typo'); @include adjust-font-size-to($eta); }
@mixin as-blockquote		{ @include baseline-grid('typo'); @include adjust-font-size-to($quote); line-height: normal; }
@mixin as-decrease			{ @include baseline-grid('typo'); @include adjust-font-size-to($decrease); line-height: normal; }
@mixin as-para				{ @include baseline-grid('typo'); @include adjust-font-size-to($para); }
@mixin as-small				{ @include baseline-grid('typo'); @include adjust-font-size-to($small); }
@mixin as-mini				{ @include baseline-grid('typo'); @include adjust-font-size-to($mini); }

%as-heading__headline		{ @include as-heading__headline; }
%as-heading__largest		{ @include as-heading__largest; }
%as-heading__large			{ @include as-heading__large; }
%as-heading__medium			{ @include as-heading__medium; }
%as-heading__normal			{ @include as-heading__normal; }
%as-heading__small			{ @include as-heading__small; }
%as-heading__smallest		{ @include as-heading__smallest; }
%as-blockquote				{ @include as-blockquote; }
%as-decrease				{ @include as-decrease; }
%as-list					{ @include as-para; }
%as-para					{ @include as-para; }
%as-small					{ @include as-small; }
%as-mini					{ @include as-mini; }





/*------------------------------------*\
    $TYPESET_RHYTHM_MATCHING
\*------------------------------------*/

@mixin as-heading__headline--typeset	{ margin-bottom: rhythm(1.5, $alpha); }
@mixin as-heading__largest--typeset		{ margin-bottom: rhythm(1.25, $beta); }
@mixin as-heading__large--typeset		{ margin-bottom: rhythm(1, $gamma); }
@mixin as-heading__medium--typeset		{ margin-bottom: rhythm(.75, $delta); }
@mixin as-heading__normal--typeset		{ margin-bottom: rhythm(.5, $epsilon); }
@mixin as-heading__small--typeset		{ margin-bottom: rhythm(.25, $zeta); }
@mixin as-heading__smallest--typeset	{ margin-bottom: rhythm(0, $eta); }
@mixin as-para--typeset					{ margin-bottom: rhythm(1); }
@mixin as-list--typeset					{ margin-bottom: rhythm(1, $para); }
@mixin as-unordered-list--typeset		{ @include as-list--typeset; }
@mixin as-ordered-list--typeset			{ @include as-list--typeset; }
@mixin as-blockquote--typeset			{ @include as-blockquote; margin: rhythm(6, $quote) 0; }

%as-heading__headline--typeset			{ @include as-heading__headline--typeset; }
%as-heading__largest--typeset			{ @include as-heading__largest--typeset; }
%as-heading__large--typeset				{ @include as-heading__large--typeset; }
%as-heading__medium--typeset			{ @include as-heading__medium--typeset; }
%as-heading__normal--typeset			{ @include as-heading__normal--typeset; }
%as-heading__small--typeset				{ @include as-heading__small--typeset; }
%as-heading__smallest--typeset			{ @include as-heading__smallest--typeset; }
%as-para--typeset						{ @include as-para--typeset; }
%as-list--typeset						{ @include as-list--typeset; }
%as-unordered-list--typeset				{ @include as-unordered-list--typeset; }
%as-ordered-list--typeset				{ @include as-ordered-list--typeset; }
%as-blockquote--typeset					{ @include as-blockquote--typeset; }





/*------------------------------------*\
    
\*------------------------------------*/